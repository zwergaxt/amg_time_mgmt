services:
  database:
    image: postgres
    environment:
      - POSTGRES_USER=amg
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - "${AMG_VOL_PATH}:/var/lib/postgresql/data"
    ports:
      - 5432:5432
    restart: unless-stopped
    networks:
      - amg_net    
  
  backend:
    depends_on:
      - database
    image: amg-time-backend
    build: ./amg_time
    ports:
      - 8000:8000
    restart: unless-stopped
    networks:
      - amg_net    
  
  front:
    depends_on: 
      - backend
    image: amg-time-frontend
    build: ./amg_time_front
    ports:
      - 3000:3000
    restart: unless-stopped
    networks:
      - amg_net    

  metabase:
    depends_on:
      - backend
    image: metabase/metabase:v0.54.5.x
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabaseappdb
      - MB_DB_PORT=5432
      - MB_DB_USER=metabase
      - MB_DB_PASS=mtb_password1
      - MB_DB_HOST=172.21.0.4
    ports: 
      - 8080:3000
    restart: unless-stopped
    networks:
      - amg_net
  
  bi_database:
    image: postgres
    environment:
      - POSTGRES_USER=metabase
      - POSTGRES_DB=metabaseappdb
      - POSTGRES_PASSWORD=mtb_password1
    volumes:
      - "${AMG_VOL_PATH_BI}:/var/lib/postgresql/data"
    ports:
      - 5433:5432
    restart: unless-stopped
    networks:
      amg_net:
        ipv4_address: 172.21.0.4
  
  logging:
    image: timberio/vector:0.46.1-alpine
    restart: unless-stopped
    # environment:
    #   - DOCKER_HOST="/var/run/docker.sock"
    volumes:
      - "./docker_configs/:/etc/vector"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - amg_net

networks:
  amg_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/28
          gateway: 172.21.0.1